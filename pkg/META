version = "0.2"
description = "Type-driven code generation"
ppx = "./ppx_deriving"

package "api" (
  version = "0.2"
  description = "Plugin API for ppx_deriving"
  requires = "dynlink compiler-libs.common ppx_tools.metaquot findlib"
  archive(byte) = "ppx_deriving.cma"
  archive(byte, plugin) = "ppx_deriving.cma"
  archive(native) = "ppx_deriving.cmxa"
  archive(native, plugin) = "ppx_deriving.cmxs"
  exists_if = "ppx_deriving.cma"
)

package "main" (
  version = "0.2"
  description = "Runner for ppx_deriving"
  requires = "ppx_deriving.api"
  archive(byte) = "ppx_deriving_main.cma"
  archive(byte, plugin) = "ppx_deriving_main.cma"
  archive(native) = "ppx_deriving_main.cmxa"
  archive(native, plugin) = "ppx_deriving_main.cmxs"
  exists_if = "ppx_deriving_main.cma"
)

package "show" (
  version = "0.2"
  description = "[@@deriving Show]"
  requires = "ppx_deriving.api"
  archive(byte) = "ppx_deriving_show.cma"
  archive(byte, plugin) = "ppx_deriving_show.cma"
  archive(native) = "ppx_deriving_show.cmxa"
  archive(native, plugin) = "ppx_deriving_show.cmxs"
  exists_if = "ppx_deriving_show.cma"
)

package "eq" (
  version = "0.2"
  description = "[@@deriving Eq]"
  requires = "ppx_deriving.api"
  archive(byte) = "ppx_deriving_eq.cma"
  archive(byte, plugin) = "ppx_deriving_eq.cma"
  archive(native) = "ppx_deriving_eq.cmxa"
  archive(native, plugin) = "ppx_deriving_eq.cmxs"
  exists_if = "ppx_deriving_eq.cma"
)

package "ord" (
  version = "0.2"
  description = "[@@deriving Ord]"
  requires = "ppx_deriving.api"
  archive(byte) = "ppx_deriving_ord.cma"
  archive(byte, plugin) = "ppx_deriving_ord.cma"
  archive(native) = "ppx_deriving_ord.cmxa"
  archive(native, plugin) = "ppx_deriving_ord.cmxs"
  exists_if = "ppx_deriving_ord.cma"
)

package "enum" (
  version = "0.2"
  description = "[@@deriving Enum]"
  requires = "ppx_deriving.api"
  archive(byte) = "ppx_deriving_enum.cma"
  archive(byte, plugin) = "ppx_deriving_enum.cma"
  archive(native) = "ppx_deriving_enum.cmxa"
  archive(native, plugin) = "ppx_deriving_enum.cmxs"
  exists_if = "ppx_deriving_enum.cma"
)

package "iter" (
  version = "0.2"
  description = "[@@deriving Iter]"
  requires = "ppx_deriving.api"
  archive(byte) = "ppx_deriving_iter.cma"
  archive(byte, plugin) = "ppx_deriving_iter.cma"
  archive(native) = "ppx_deriving_iter.cmxa"
  archive(native, plugin) = "ppx_deriving_iter.cmxs"
  exists_if = "ppx_deriving_iter.cma"
)

package "map" (
  version = "0.2"
  description = "[@@deriving Map]"
  requires = "ppx_deriving.api"
  archive(byte) = "ppx_deriving_map.cma"
  archive(byte, plugin) = "ppx_deriving_map.cma"
  archive(native) = "ppx_deriving_map.cmxa"
  archive(native, plugin) = "ppx_deriving_map.cmxs"
  exists_if = "ppx_deriving_map.cma"
)

package "fold" (
  version = "0.2"
  description = "[@@deriving Fold]"
  requires = "ppx_deriving.api"
  archive(byte) = "ppx_deriving_fold.cma"
  archive(byte, plugin) = "ppx_deriving_fold.cma"
  archive(native) = "ppx_deriving_fold.cmxa"
  archive(native, plugin) = "ppx_deriving_fold.cmxs"
  exists_if = "ppx_deriving_fold.cma"
)

package "conv" (
  version = "0.2"
  description = "[@@deriving Conv]"
  requires = "ppx_deriving.api"
  archive(byte) = "ppx_deriving_conv.cma"
  archive(byte, plugin) = "ppx_deriving_conv.cma"
  archive(native) = "ppx_deriving_conv.cmxa"
  archive(native, plugin) = "ppx_deriving_conv.cmxs"
  exists_if = "ppx_deriving_conv.cma"
)
